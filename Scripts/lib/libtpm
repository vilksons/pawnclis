#!/bin/bash

function bash_typeof2() {
    if [ ! -f "package.json" ]; then
        echo -e "$(bash_coltext_g "warn:") package.json not found"
            
        cat > package.json <<EOF
{
    "package": [
        "github/example/user/repository",
        "github/example/user/repository/to/files/.zip",
        "github/example/user/repository/to/files/.tar.gz",
        "gitlab/example/user/repository",
        "gitlab/example/user/repository/to/files/.zip",
        "gitlab/example/user/repository/to/files/.tar.gz"
    ]
}
EOF
    fi
    
    BASH_TITLE="TPM Mode"
    bash_title "$BASH_TITLE"

    echo -n "$(bash_coltext_y "$SHUSERS")"
    echo -n ":~$ "
    read -r TPM_OPTION_FLAGS
    packageManager ""
}
export bash_typeof2

packageManager()
{
    local TPM_TR="tpm"
    local TPM_UNHOST=0

    case "$TPM_OPTION_FLAGS" in
        "$TPM_TR -S"* | "install"*)
            BASH_TITLE="TPM Install/Reinstall Package"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            local TPM_PLUGIN_DIR="plugins"
            local TPM_PACKAGE_FILE="package.json"
            local TPM_SERVER_CFG="server.cfg"

            if [ ! -d "$TPM_DIR" ]; then
                mkdir -p "$ALLOW_INC_DIR"
            fi

            TPM_REPOSITORY_URL="${TPM_OPTION_FLAGS#"$TPM_TR -S "}"
            TPM_REPOSITORY_URL="${TPM_REPOSITORY_URL#install }"

            if [[ -n "$TPM_REPOSITORY_URL" && "$TPM_REPOSITORY_URL" != "$TPM_TR -S" ]]; then
                TPM_URLS=("$TPM_REPOSITORY_URL")
            else
                mapfile -t TPM_URLS < <(awk -F '"' '/"package"/ {f=1; next} f && NF {print $2} /]/ {f=0}' "$TPM_PACKAGE_FILE")
            fi

            for TPM_REPOSITORY_URL in "${TPM_URLS[@]}"; do
                if [[ "$TPM_REPOSITORY_URL" != https://* ]]; then
                    if [[ "$TPM_REPOSITORY_URL" == github/* ]]; then
                        TPM_REPOSITORY_URL="https://github.com/${TPM_REPOSITORY_URL#github/}"
                    elif [[ "$TPM_REPOSITORY_URL" == gitlab/* ]]; then
                        TPM_REPOSITORY_URL="https://gitlab.com/${TPM_REPOSITORY_URL#gitlab/}"
                    elif [[ "$TPM_REPOSITORY_URL" == sourceforge/* ]]; then
                        TPM_REPOSITORY_URL="https://sourceforge.net/projects/${TPM_REPOSITORY_URL#sourceforge/}"
                    else
                        echo "$(bash_coltext_g "warn:") host url unknown's: $TPM_API_URL..."
                        TPM_UNHOST=1
                        continue
                    fi
                fi
                
                if [[ "$TPM_REPOSITORY_URL" == *"/releases/download/"* ]]; then
                    TPM_ARCHIVE_URL="$TPM_REPOSITORY_URL"
                elif [[ "$TPM_REPOSITORY_URL" == *"/releases/tag/"* ]]; then
                    TPM_REPO_NAME=$(echo "$TPM_REPOSITORY_URL" | awk -F '/' '{print $(NF-3) "/" $(NF-2)}')
                    TPM_TAG_VERSION=$(echo "$TPM_REPOSITORY_URL" | awk -F '/' '{print $NF}')
                
                    if [[ "$TPM_REPOSITORY_URL" == *"github.com"* ]]; then
                        TPM_API_URL="https://api.github.com/repos/$TPM_REPO_NAME/git/refs/tags/$TPM_TAG_VERSION"
                    elif [[ "$TPM_REPOSITORY_URL" == *"gitlab.com"* ]]; then
                        TPM_API_URL="https://gitlab.com/api/v4/projects/$(echo "$TPM_REPO_NAME" | tr '/' '%2F')/releases/$TPM_TAG_VERSION"
                    elif [[ "$TPM_REPOSITORY_URL" == *"sourceforge.net"* ]]; then
                        TPM_API_URL="https://sourceforge.net/projects/$TPM_REPO_NAME/files/latest/download"
                    else
                        echo "$(bash_coltext_g "warn:") host url unknown's: $TPM_API_URL..."
                        TPM_UNHOST=1
                        continue
                    fi
                
                    if [ $TPM_UNHOST == 1 ]; then
                        [[ -z "$TPM_ARCHIVE_URL" ]] && TPM_ARCHIVE_URL=$(curl -s "$TPM_REPOSITORY_URL" | grep "browser_download_url" | grep -E ".zip|.tar.gz" | awk -F '"' '{print $4}' | head -n 1)
                    elif [ $TPM_UNHOST == 0 ]; then
                        [[ -z "$TPM_ARCHIVE_URL" ]] && TPM_ARCHIVE_URL=$(curl -s "$TPM_API_URL" | grep "browser_download_url" | grep -E ".zip|.tar.gz" | awk -F '"' '{print $4}' | head -n 1)
                    fi
                else
                    TPM_REPO_NAME=$(echo "$TPM_REPOSITORY_URL" | awk -F '/' '{print $(NF-1) "/" $NF}')
                
                    if [[ "$TPM_REPOSITORY_URL" == *"github.com"* ]]; then
                        TPM_API_URL="https://api.github.com/repos/$TPM_REPO_NAME/releases/latest"
                    elif [[ "$TPM_REPOSITORY_URL" == *"gitlab.com"* ]]; then
                        TPM_API_URL="https://gitlab.com/api/v4/projects/$(echo "$TPM_REPO_NAME" | tr '/' '%2F')/releases/permalink/latest"
                    elif [[ "$TPM_REPOSITORY_URL" == *"sourceforge.net"* ]]; then
                        TPM_ARCHIVE_URL="https://sourceforge.net/projects/$TPM_REPO_NAME/files/latest/download"
                    else
                        echo "$(bash_coltext_g "warn:") host url unknown's: $TPM_API_URL..."
                        TPM_UNHOST=1
                        continue
                    fi

                    if [ $TPM_UNHOST == 1 ]; then
                        [[ -z "$TPM_ARCHIVE_URL" ]] && TPM_ARCHIVE_URL=$(curl -s "$TPM_REPOSITORY_URL" | grep "browser_download_url" | grep -E ".zip|.tar.gz" | awk -F '"' '{print $4}' | head -n 1)
                    elif [ $TPM_UNHOST == 0 ]; then
                        [[ -z "$TPM_ARCHIVE_URL" ]] && TPM_ARCHIVE_URL=$(curl -s "$TPM_API_URL" | grep "browser_download_url" | grep -E ".zip|.tar.gz" | awk -F '"' '{print $4}' | head -n 1)
                    fi
                fi

                TPM_ARCHIVE_FILE=".__temp__.zip"
                TPM_EXTRACT_DIR=".__temp__"

                rm -rf "$TPM_EXTRACT_DIR"
                mkdir -p "$TPM_EXTRACT_DIR"

                TPM_FILE_NAME=$(basename "$TPM_REPOSITORY_URL")
                TPM_FILE_NAME="${TPM_FILE_NAME%.*}"
                TPM_EX_VERSION_REPO=""

                if [[ "$TPM_REPOSITORY_URL" == *"/releases/tag/"* ]]; then
                    TPM_VERSION_REPO=$(echo "$TPM_REPOSITORY_URL" | awk -F '/' '{print $NF}')
                elif [[ "$TPM_REPOSITORY_URL" == *"/releases/download/"* ]]; then
                    TPM_VERSION_REPO=$(echo "$TPM_REPOSITORY_URL" | awk -F '/' '{print $(NF-1)}')
                else
                    TPM_VERSION_REPO="unknown"
                fi

                TPM_VERSION_REPO=${TPM_VERSION_REPO#v}
                TPM_EX_VERSION_REPO="$TPM_VERSION_REPO"

                if ! [[ "$TPM_VERSION_REPO" =~ [0-9] ]]; then
                    TPM_VERSION_REPO=""
                    TPM_EX_VERSION_REPO="unknown"
                fi

                echo -e "$(bash_coltext_y "Downloading") $TPM_FILE_NAME $TPM_VERSION_REPO"

if [ "$TPM_INSTALLER" == "curl" ]; then
    curl -sL "$TPM_ARCHIVE_URL" -o "$TPM_ARCHIVE_FILE"
elif [ "$TPM_INSTALLER" == "pycurl" ]; then
    python3 -c "
import pycurl

with open('$TPM_ARCHIVE_FILE', 'wb') as f:
    c = pycurl.Curl()
    c.setopt(c.URL, '$TPM_ARCHIVE_URL')
    c.setopt(c.WRITEDATA, f)
    c.setopt(c.FOLLOWLOCATION, True)
    c.perform()
    c.close()
"
elif [ "$TPM_INSTALLER" == "urllib3" ]; then
    python3 -c "
import urllib3

http = urllib3.PoolManager()
r = http.request('GET', '$TPM_ARCHIVE_URL', preload_content=False)

with open('$TPM_ARCHIVE_FILE', 'wb') as f:
    [f.write(chunk) for chunk in r.stream(1024)]

r.release_conn()
"
elif [ "$TPM_INSTALLER" == "requests" ]; then
    python3 -c "
import requests

r = requests.get('$TPM_ARCHIVE_URL', stream=True)

with open('$TPM_ARCHIVE_FILE', 'wb') as f:
    [f.write(chunk) for chunk in r.iter_content(1024)]
"
fi

                if file "$TPM_ARCHIVE_FILE" | grep -q "Zip archive data"; then
                    unzip -q "$TPM_ARCHIVE_FILE" -d "$TPM_EXTRACT_DIR"
                elif file "$TPM_ARCHIVE_FILE" | grep -q "gzip compressed data"; then
                    mkdir -p "$TPM_EXTRACT_DIR"
                    tar -xzf "$TPM_ARCHIVE_FILE" -C "$TPM_EXTRACT_DIR" --strip-components=1
                else
                    echo -e "$(bash_coltext_r "crit:") Downloaded file is not a valid ZIP or TAR.GZ - Please check Downloader status.."
                    rm -rf "$TPM_ARCHIVE_FILE" "$TPM_EXTRACT_DIR"
                    continue
                fi

                TPM_EXTRACT_SUBDIR=$(find "$TPM_EXTRACT_DIR" -mindepth 1 -maxdepth 1 -type d | head -n 1)
                
                if [[ -d "$TPM_EXTRACT_SUBDIR" ]]; then
                    mv "$TPM_EXTRACT_SUBDIR"/* "$TPM_EXTRACT_DIR/"
                    rm -rf "$TPM_EXTRACT_SUBDIR"
                fi

                echo -e "$(bash_coltext_y "dbg: ")Extraction Directory.."

                find "$TPM_EXTRACT_DIR" -type f -name "*.inc" | while IFS= read -r inc_file; do
                    rel_path=$(realpath --relative-to="$TPM_EXTRACT_DIR" "$inc_file" 2> /dev/null || echo "$inc_file")

                    if [[ "$rel_path" =~ (^|/)include/ ]]; then
                        rel_path="${rel_path#*include/}"
                    fi

                    if [[ "$rel_path" == */* ]]; then
                        dest_path="$ALLOW_INC_DIR/$(dirname "$rel_path")"
                    else
                        dest_path="$ALLOW_INC_DIR"
                    fi

                    mkdir -p "$dest_path"
                    mv "$inc_file" "$dest_path/"
                done

                find "$TPM_EXTRACT_DIR" -type f \( -name "*.dll" -o -name "*.so" \) -exec mv {} "$TPM_PLUGIN_DIR/" \;

                rm -rf "$TPM_ARCHIVE_FILE" "$TPM_EXTRACT_DIR"
                echo -e "$(bash_coltext_y "Complete!.") Packages: $TPM_FILE_NAME | $TPM_EX_VERSION_REPO"
            done

            echo -e "$(bash_coltext_y "[All packages installed]")"

            mkdir -p "$TPM_PLUGIN_DIR"

            if [ ! -f "$TPM_SERVER_CFG" ]; then
                echo -e "$(bash_coltext_g "warn:") $TPM_SERVER_CFG not found!."
                echo "plugins " > "$TPM_SERVER_CFG"
            fi
            
            if ! grep -q "^plugins " "$TPM_SERVER_CFG"; then
                sed -i '1i plugins ' "$TPM_SERVER_CFG"
            fi
            
            _EXIST_PLUG=$(grep -oP '(?<=plugins ).*' "$TPM_SERVER_CFG" | tr ' ' '\n' | sort -u)
            
            TPM_NEW_PLUGINS=()
            for FILE in "$TPM_PLUGIN_DIR"/*.{so,dll}; do
                if [ -e "$FILE" ]; then
                    EXT="${FILE##*.}"
                    if [ "$EXT" == "so" ]; then
                        _TPM_PLUGIN_NAME=$(basename "$FILE")
                    else
                        _TPM_PLUGIN_NAME=$(basename "$FILE" | sed 's/\.[^.]*$//')
                    fi
            
                    if ! echo "$_EXIST_PLUG" | grep -qx "$_TPM_PLUGIN_NAME"; then
                        TPM_NEW_PLUGINS+=("$_TPM_PLUGIN_NAME")
                    fi
                fi
            done
            
            if [ ${#TPM_NEW_PLUGINS[@]} -gt 0 ]; then
                TPM_UPDATED_PLUGINS=$(echo "$_EXIST_PLUG" "${TPM_NEW_PLUGINS[@]}" | tr '\n' ' ' | xargs -n1 | sort -u | xargs)
                sed -i "s/^plugins .*/plugins $TPM_UPDATED_PLUGINS/" "$TPM_SERVER_CFG"
                echo " Added new plugins to server.cfg: ${TPM_NEW_PLUGINS[*]}"
            else
                echo -e "$(bash_coltext_y "dbg:") No new plugins need to be added."
            fi

            bash_typeof2 ""
            ;;
        "$TPM_TR -r"* | "remove"*)
            BASH_TITLE="TPM Remove Package"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            local FOR_FIND_ARGS="${TPM_OPTION_FLAGS#"$TPM_TR -r "}"
            local FOR_FIND_ARGS="${FOR_FIND_ARGS#remove }"

            if [[ -n "$FOR_FIND_ARGS" ]]; then
                REMOVE_PATTERN="$FOR_FIND_ARGS"
            else
                echo ":: Enter the name pattern of the include/plugin to remove:"
                read -r -p ">>> " REMOVE_PATTERN
            fi

            local TPM_PLUGIN_DIR="plugins"
            local TPM_SERVER_CFG="server.cfg"

            filter_files() {
                local pattern="$1"
                while read -r file; do
                    filename=$(basename "$file")
                    if [[ "$filename" =~ ^$pattern(\.[a-z]+)?$ || "$filename" =~ .*-?$pattern(\.[a-z]+)?$ ]]; then
                        echo "$file"
                    fi
                done
            }

            INC_FILES=$(find "$ALLOW_INC_DIR" -type f -name "*.inc" | filter_files "$REMOVE_PATTERN")

            if [[ -n "$INC_FILES" ]]; then
                echo "$INC_FILES" | xargs rm -rf
                echo -e "$(bash_coltext_y "[OK] ") Removed includes: $INC_FILES"
            else
                echo -e "$(bash_coltext_y "dbg:") No matching include files found for pattern: $REMOVE_PATTERN"
            fi

            PLUGIN_FILES=$(find "$TPM_PLUGIN_DIR" -type f \( -name "*.dll" -o -name "*.so" \) | filter_files "$REMOVE_PATTERN")

            if [[ -n "$PLUGIN_FILES" ]]; then
                echo "$PLUGIN_FILES" | xargs rm -rf
                echo -e "$(bash_coltext_y "[OK] ") Removed plugins: $PLUGIN_FILES"
            else
                echo -e "$(bash_coltext_y "dbg:") No matching plugins found for pattern: $REMOVE_PATTERN"
            fi

            if [[ -f "$TPM_SERVER_CFG" ]]; then
                if grep -q "^plugins" "$TPM_SERVER_CFG"; then
                    sed -i "/^plugins /s/\b$REMOVE_PATTERN\(\.so\|\.dll\|\.dylib\|\)//g" "$TPM_SERVER_CFG"
                    sed -i 's/  / /g' "$TPM_SERVER_CFG"
                    sed -i 's/^plugins *$/plugins /' "$TPM_SERVER_CFG"
                    echo -e "$(bash_coltext_y "[OK] ") Removed $REMOVE_PATTERN from server.cfg"
                else
                    echo -e "$(bash_coltext_y "dbg:") No 'plugins' entry found in server.cfg"
                fi
            fi

            echo -e "$(bash_coltext_y "[OK] ") Removal process completed!"
            echo 
            
            bash_typeof2 ""
            ;;
        "$BASH_OPTION -C" | "clear" | "cc")
            clear; echo -ne "\033[3J"
            bash_typeof2 ""
            ;;
        "$TPM_TR" | "$TPM_TR " | "" | " ")
            bash_help2
            bash_typeof2 ""
            ;;
        "help")
            BASH_TITLE="help"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            bash_help2
            bash_typeof2 ""
            ;;
       "$TPM_TR -E" | "end")
            bash_typeof ""
            ;;
        *)
            echo "error: $TPM_OPTION_FLAGS: command not found"
            bash_typeof2 ""
            ;;
    esac
}
