#!/bin/bash

RELEASE_DATE="2025/03"

if [ ! -f "triops.json" ]; then
    cat > triops.json <<EOF
{
    "amx_opt": ["-d2", "-Z+"],
    "tpm_dir": "pawno",
    "tpm_subdir": "include",
    "tpm_type": "curl",
    "chatbot_token": "",
    "chatbot_model": "",
    "chatbot_biodata": "",
    "chatbot_json_get": ""
}
EOF
fi

if [ ! -d ".cache" ]; then
    mkdir ".cache"
fi

process_json() {
    local key="$1"
    python3 -c "
import json, sys
try:
    with open('triops.json') as f:
        data = json.load(f)
    print(data.get('$key', 'error load json for : \"$key\"'))
except Exception as e:
    print(f'error load json for : \"$key\"')
"
}

TPM_DIR=$(process_json "tpm_dir")
export TPM_DIR

TPM_SUBDIR=$(process_json "tpm_subdir")
export TPM_SUBDIR

ALLOW_INC_DIR="$TRIOPS_DIR/$TRIOPS_SUBDIR"
export ALLOW_INC_DIR

TPM_INSTALLER=$(process_json "tpm_type")
export TPM_INSTALLER

AMX_OPT_F=$(python3 -c "
import json, sys
try:
    with open('triops.json') as f:
        data = json.load(f)
    print(' '.join(data.get('amx_opt', [])))
except Exception as e:
    print('error load json for : \"amx_opt\"')
")

CHATBOT_TOKEN=$(process_json "chatbot_token")
CHATBOT_MODEL=$(process_json "chatbot_model")
CHATBOT_BIODATA=$(process_json "chatbot_biodata")
CHATBOT_JSON_GET=$(process_json "chatbot_json_get")

METADAT_FILE=".cache/compiler.log"

BASH_TITLE=""
BASH_DIR="$(dirname "$(realpath "$0")")"
BASH_NAME="$(basename "$0")"
LICENSES="GPL v2.0 Only"
COMPILER_MODE="false"
COMPILER_PAWNCC=""

TYPEOF_VAR_NOTICE=0

VAR_SERVERS=0

SHUSERS="$USER@$(hostname 2> /dev/null || echo )"

function bash_title() {
    echo -ne "\033]0;$1\007"
}

bash_title "$SHUSERS:~"

COLOR_Y="\e[33m"
COLOR_G="\e[32m"
COLOR_R="\e[91m"
COLOR_A="\e[97m"

function bash_coltext_y() {
    local color="$COLOR_Y"
    local text="$1"
    echo -e "${color}${text}\e[0m"
}
export bash_coltext_y

function bash_coltext_g() {
    local color="$COLOR_G"
    local text="$1"
    echo -e "${color}${text}\e[0m"
}
export bash_coltext_g

function bash_coltext_r() {
    local color="$COLOR_R"
    local text="$1"
    echo -e "${color}${text}\e[0m" 
}
export bash_coltext_r

function bash_coltext_a() {
    local color="$COLOR_A"
    local text="$1"
    echo -e "${color}${text}\e[0m"
}
export bash_coltext_a

resetVariable() {
    COMPILER_MODE="false"
    COMPILER_PAWNCC=""
    VAR_SERVERS=0
}

if [ ! -d ".lib" ]; then
    mkdir ".lib"
fi

# shellcheck source=/dev/null

security_safe() {
    if [ -f "$BASH_DIR/.lib/security" ]; then
        source "$BASH_DIR/.lib/security"
    else
        BASH_TITLE="Waiting resource.."
        bash_title "$BASH_TITLE"

        echo -e "$(bash_coltext_y "info:") security not found!."
        echo -e "$(bash_coltext_g "note:") Installing.."
        sleep 3 && clear

        cd "$BASH_DIR/.lib" >/dev/null 2>&1 || echo ""

        if ! curl -L --progress-bar -o "security" "https://raw.githubusercontent.com/vilksons/triops/refs/heads/main/Tools/security" &&
           ! curl -L --progress-bar -o "security" "https://gitea.com/vilksons/triops/raw/branch/main/Tools/security"; then
            echo -e "$(bash_coltext_r "Failed: Always check for updates on the official Triops repository before doing Sync.")"
        fi

        clear
    fi
}

_OS_ACCEPT=0
_OS_GNU_LINUX=0
_OS_WINDOWS=0
_OS_DARWIN=0
_OS_SSERVER="null"
_OS_PAWNCC="null"
_OS_DISABLE_GNU_NANO=""

check_os() {
    : '
        Operating System (OS) Check { GNU/Linux, Darwin - MacOS, Windows }
    '

    if [ "$_OS_ACCEPT" != 1 ]; then
        OS_TYPE=$(uname)

        if [[ "$OS_TYPE" == "Linux" ]]; then
            $SUDO . /etc/os-release
            _OS_GNU_LINUX=1
            _OS_PAWNCC="pawncc"
            _OS_DISABLE_GNU_NANO="false"
            _OS_SSERVER="samp03svr"
        elif [[ "$OS_TYPE" == "Darwin" ]]; then
            _OS_DARWIN=1
            _OS_PAWNCC="pawncc"
            _OS_DISABLE_GNU_NANO="true"
            _OS_SSERVER="samp03svr"
        elif [ -d "/c/Windows/System32" ] || [ -d "/mnt/c/Windows/System32" ] || [ -d "/Windows/System32" ]; then
            _OS_WINDOWS=1
            _OS_PAWNCC="pawncc.exe"
            _OS_DISABLE_GNU_NANO="true"
            _OS_SSERVER="samp-server.exe"
        fi

        if { [ "$_OS_WINDOWS" == 1 ] && [ "$_OS_GNU_LINUX" == 1 ]; } || 
           [ "$_OS_DARWIN" == 1 ] || 
           { [ "$_OS_GNU_LINUX" == 1 ] && [ "$_OS_DARWIN" == 1 ]; }; then
            
            echo -e "$(bash_coltext_a ":: System detected both Windows and Linux / MacOS (Darwin). Which one will you choose?")"
            read -r -p "Choose OS for Triops Y) Windows, B) GNU/Linux, X) Darwin (Mac): " PERMISSION_NEED_OS

            while true; do
                case "$PERMISSION_NEED_OS" in
                    [Yy]) 
                        _OS_PAWNCC="pawncc.exe"
                        _OS_DISABLE_GNU_NANO="true"
                        _OS_SSERVER="samp-server.exe"
                        _OS_WINDOWS=1
                        _OS_GNU_LINUX=0
                        _OS_DARWIN=0
                        break 
                        ;;
                    [Bb]) 
                        _OS_PAWNCC="pawncc"
                        _OS_DISABLE_GNU_NANO="false"
                        _OS_SSERVER="samp03svr"
                        _OS_WINDOWS=0
                        _OS_GNU_LINUX=1
                        _OS_DARWIN=0
                        break 
                        ;;
                    [Xx]) 
                        _OS_PAWNCC="pawncc"
                        _OS_DISABLE_GNU_NANO="false"
                        _OS_SSERVER="samp03svr"
                        _OS_WINDOWS=0
                        _OS_GNU_LINUX=0
                        _OS_DARWIN=1
                        break 
                        ;;
                    *) 
                        echo -e "$(bash_coltext_r "err:") Invalid selection. Please enter the correct option!"
                        read -r -p "Choose OS for Triops Y) Windows, B) GNU/Linux, X) Darwin (Mac): " PERMISSION_NEED_OS 
                        ;;
                esac
            done
        fi
    fi
}

# shellcheck source=/dev/null

function bash_typeof() {
    : '
        Main Function
    '

    security_safe ""
    check_os ""

    function check_and_download_lib() {
        local lib_name=$1
        local lib_url_1=$2
        local lib_url_2=$3

        if [ -f "$BASH_DIR/.lib/$lib_name" ]; then
            source "$BASH_DIR/.lib/$lib_name"
        else
            BASH_TITLE="Waiting resource.."
            bash_title "$BASH_TITLE"

            echo -e "$(bash_coltext_y "info:") $lib_name not found!."
            echo -e "$(bash_coltext_g "note:") Installing.."
            sleep 3 && clear

            cd "$BASH_DIR/.lib" >/dev/null 2>&1 || echo ""

            if ! curl -L --progress-bar -o "$lib_name" "$lib_url_1" &&
               ! curl -L --progress-bar -o "$lib_name" "$lib_url_2"; then
                echo -e "$(bash_coltext_r "Failed: Always check for updates on the official Triops repository before doing Sync.")"
            fi

            sleep 0.1 && clear
            cd "$BASH_DIR" >/dev/null 2>&1 || echo ""
            bash ./"$BASH_NAME"
        fi
    }

    check_and_download_lib "libtpm" \
        "https://raw.githubusercontent.com/vilksons/Triops/refs/heads/main/Tools/libtpm" \
        "https://gitea.com/vilksons/triops/raw/branch/main/Tools/libtpm"

    check_and_download_lib "libpack" \
        "https://raw.githubusercontent.com/vilksons/triops/refs/heads/main/Tools/libpack" \
        "https://gitea.com/vilksons/triops/raw/branch/main/Tools/libpack"

    if [[ $TYPEOF_VAR_NOTICE != 1 ]]; then
        TYPEOF_VAR_NOTICE=1

        BASH_TITLE="Press any key to Continue"
        bash_title "$BASH_TITLE"

        if [ ! -f "$BASH_DIR/$_OS_SSERVER" ]; then
            echo -e "$(bash_coltext_g "warn:") $_OS_SSERVER not found!. Get Now! - \`ops -g\`"
            read -r -n 1 -s
            clear
        fi

        while IFS= read -r -d '' pawncc; do
            if [ -f "$pawncc" ]; then
                COMPILER_PAWNCC="$pawncc"
                break
            fi
        done < <(find "$BASH_DIR" -type f -iname "$_OS_PAWNCC" -print0)

        if [ -z "$COMPILER_PAWNCC" ]; then
            echo -e "$(bash_coltext_g "warn:") $_OS_PAWNCC not found!. Get Now! - \`ops -p\`"
            read -r -n 1 -s
            clear
        fi

        _OS_ACCEPT=1
        go_next ""
    else
        go_next ""
    fi
}
export bash_typeof

function go_next() {
    : '
        Send Permission for Typing
    '

    BASH_TITLE="OPS Mode"
    bash_title "$BASH_TITLE"

    echo -n "$(bash_coltext_y "$SHUSERS")"
    echo -n ":~$ "
    read -r OPS_OPTION_FLAGS

    bash_OPS "" && resetVariable ""
}

bash_OPS() {
    : '
        Paw Mode
    '

    local OPS_TRIGGER="ops"

    case "$OPS_OPTION_FLAGS" in
        "$OPS_TRIGGER -c"* | "compiles"*)
            BASH_TITLE="compiler"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            if [ -f "$DOB_SHA256_CRYPTO" ]; then
                PID=$(cat "$DOB_SHA256_CRYPTO")
                kill -15 "$PID" > /dev/null 2>&1
            fi
            
            if [[ "$OPS_OPTION_FLAGS" =~ ^"$OPS_TRIGGER -c compiler " ]]; then
                OPS_FIND_INPUT="${OPS_OPTION_FLAGS#"$OPS_TRIGGER -c compiler "}"
            elif [[ "$OPS_OPTION_FLAGS" =~ ^"$OPS_TRIGGER -c " ]]; then
                OPS_FIND_INPUT="${OPS_OPTION_FLAGS#"$OPS_TRIGGER -c "}"
            else
                COMPILER_MODE="true"
                triops_compilers ""
            fi

            while IFS= read -r -d '' pawncc; do
                if [ -f "$pawncc" ]; then
                    COMPILER_PAWNCC="$pawncc"
                    break
                fi
            done < <(find "$BASH_DIR" -type f -iname "$_OS_PAWNCC" -print0)

            if [ -z "$COMPILER_PAWNCC" ]; then
                echo -e "$(bash_coltext_g "warn:") $_OS_PAWNCC not found!. You can get this in \`ops -p\`"

                read -r -n 1 -s
                bash_end ""
            fi

            mapfile -d '' files < <(find "$BASH_DIR" -name "$OPS_FIND_INPUT" -type f -print0)

            for file in "${files[@]}"; do
                if [ -f "$file" ] && [[ "$file" != *.amx ]]; then
                    bash_title "$file"

                    AMX_O="$(dirname "$file")/$(basename "${file%.*}.amx")"

                    echo -e "$(bash_coltext_y "dbg:") Processing: $file"

                    "$COMPILER_PAWNCC" -i"$BASH_DIR$BASH_ALLOW_SDIR" "$file" -o"$AMX_O" "$AMX_OPT_F" > "$METADAT_FILE" 2>&1

                    bash_cache_compiler ""
                    sleep 0.100 &&
                    cat "$METADAT_FILE"

                    if [ -s "$AMX_O" ]; then
                        echo
                        echo "~ $AMX_O"
                        if [ "$COMPILER_MODE" == "true" ]; then
                            BASH_TITLE="compilers"
                            bash_title "$SHUSERS:~/ $BASH_TITLE"
                        elif [ "$COMPILER_MODE" == "false" ]; then
                            BASH_TITLE="compiler - running"
                            bash_title "$SHUSERS:~/ $BASH_TITLE"
                        fi
                        echo "total size : $(stat -c%s "$AMX_O") bytes"
                        echo
                    else
                        if [ "$COMPILER_MODE" == "false" ]; then
                            bash_end ""
                        fi
                    fi
                fi
            done

            if [ -f "$DOB_SHA256_CRYPTO" ]; then
                PID=$(cat "$DOB_SHA256_CRYPTO")
                kill -15 "$PID" > /dev/null 2>&1
            fi
            echo
            bash_end ""
            ;;
        "$OPS_TRIGGER -r"* | "runn"*)
            BASH_TITLE="running"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            if [ -f "$DOB_SHA256_CRYPTO" ]; then
                PID=$(cat "$DOB_SHA256_CRYPTO")
                kill -15 "$PID" > /dev/null 2>&1
            fi

            if [[ "$OPS_OPTION_FLAGS" =~ ^"$OPS_TRIGGER -r runn " ]]; then
                OPS_FIND_INPUT="${OPS_OPTION_FLAGS#"$OPS_TRIGGER -r runn "}"
            elif [[ "$OPS_OPTION_FLAGS" =~ ^"$OPS_TRIGGER -r " ]]; then
                OPS_FIND_INPUT="${OPS_OPTION_FLAGS#"$OPS_TRIGGER -r "}"
            else
                triops_servers ""
            fi

            VAR_SERVERS=1
            withArgs_triops_servers "$OPS_FIND_INPUT"
            bash_end ""
            ;;
        "$OPS_TRIGGER -u" | "crunn")
            BASH_TITLE="compile & running"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            if [ -f "$DOB_SHA256_CRYPTO" ]; then
                PID=$(cat "$DOB_SHA256_CRYPTO")
                kill -15 "$PID" > /dev/null 2>&1
            fi

            COMPILER_MODE="false"
            echo && compilers ""
            
            if grep -i "error" "$METADAT_FILE" > /dev/null; then
                echo
            else
                ok_next ""
            fi
            ;;
        "$OPS_TRIGGER -d"* | "debug"*)
            BASH_TITLE="debugging a server"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            if [ -f "$DOB_SHA256_CRYPTO" ]; then
                PID=$(cat "$DOB_SHA256_CRYPTO")
                kill -15 "$PID" > /dev/null 2>&1
            fi

            if [[ "$OPS_OPTION_FLAGS" =~ ^"$OPS_TRIGGER -d debug " ]]; then
                OPS_FIND_INPUT="${OPS_OPTION_FLAGS#"$OPS_TRIGGER -d debug "}"
            elif [[ "$OPS_OPTION_FLAGS" =~ ^"$OPS_TRIGGER -d " ]]; then
                OPS_FIND_INPUT="${OPS_OPTION_FLAGS#"$OPS_TRIGGER -d "}"
            else
                if [ ! -f "$BASH_DIR/$_OS_SSERVER" ]; then
                    echo -e "$(bash_coltext_r "crit:") $_OS_SSERVER not found!. You can get this in \`ops -g\`" && read -r -n 1 -s
                    bash_end ""
                fi
                
                echo -e "$(bash_coltext_a ":: Enter GM Name:")"
                read -r -p ">>> " OPS_FIND_INPUT
            fi

            VAR_SERVERS=2
            withArgs_triops_servers "$OPS_FIND_INPUT"
            bash_end ""
            ;;
        "$OPS_TRIGGER -s" | "stop")
            BASH_TITLE="stopped a server"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            if [ -f "$DOB_SHA256_CRYPTO" ]; then
                PID=$(cat "$DOB_SHA256_CRYPTO")
                kill -15 "$PID" > /dev/null 2>&1
            fi
            bash_end ""
            ;;
        "$OPS_TRIGGER -t" | "restart")
            BASH_TITLE="restart a server"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            if pgrep -x "$_OS_SSERVER" > /dev/null; then
                if [ -f "$DOB_SHA256_CRYPTO" ]; then
                PID=$(cat "$DOB_SHA256_CRYPTO")
                kill -15 "$PID" > /dev/null 2>&1
            fi
                sleep 2
                triops_servers ""
            else
                echo "error: No progress Server running."
            fi
            ;;
        "$OPS_TRIGGER -g" | "gamemode" | "gmodes")
            BASH_TITLE="download gamemode"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            while true; do
                echo "# Linux/Windows [a/b]"
                read -r -p ">> " SEL_CO
                case "$SEL_CO" in
                    [Aa])
                        send_samp_linux "" && break ;;
                    [Bb])
                        send_samp_win "" && break ;;
                    *)
                        echo -e "$(bash_coltext_r "err:") Invalid selection. Please enter A or B." ;;
                esac
            done

            bash_end ""
            ;;
        "$OPS_TRIGGER -p" | "pawncc" | "pcc")
            BASH_TITLE="download pawncc"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            while true; do
                echo "# Linux/Windows [a/b]"
                read -r -p ">> " SEL_CO
                case "$SEL_CO" in
                    [Aa])
                        send_compilers_linux "" && break ;;
                    [Bb])
                        send_compilers_win "" && break ;;
                    *)
                        echo -e "$(bash_coltext_r "err:") Invalid selection. Please enter A or B." ;;
                esac
            done

            bash_end ""
            ;;
        "$OPS_TRIGGER -C" | "clear" | "cc")
            clear; echo -ne "\033[3J"
            bash_typeof ""
            ;;
        "$OPS_TRIGGER -F" | "fcheck")
            BASH_TITLE="folder check"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            bash_check_dir "filterscripts"
            bash_check_dir "gamemodes"
            bash_check_dir "scriptfiles"

            if [ -f "server.cfg" ]; then
                echo
                echo "# server.cfg is .. Ok .."
                echo " [A subdirectory or file server.cfg already exists.]" &&
                bash_end ""
            else
                cat <<EOF > server.cfg
echo Executing Server Config...
lanmode 0
rcon_password changename
maxplayers 150
port 7777
hostname SA-MP 0.3
gamemode0 main 1
filterscripts
announce 0
chatlogging 0
weburl www.sa-mp.com
onfoot_rate 40
incar_rate 40
weapon_rate 40
stream_distance 300.0
stream_rate 1000
maxnpc 0
logtimeformat [%H:%M:%S]
language English
EOF
                echo -e "OK? '$BASH_DIR/server.cfg'...: [yes]"
                cat server.cfg

                echo
                bash_end ""
            fi
            ;;
        "$OPS_TRIGGER -T"* | "cat"*)
            BASH_TITLE="type files"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            if [[ "$OPS_OPTION_FLAGS" =~ ^"cat " ]]; then
                OPS_FIND_INPUT="${OPS_OPTION_FLAGS#"cat "}"
            elif [[ "$OPS_OPTION_FLAGS" =~ ^"$OPS_TRIGGER -T " ]]; then
                OPS_FIND_INPUT="${OPS_OPTION_FLAGS#"$OPS_TRIGGER -T "}"
            else 
                echo -e "$(bash_coltext_a ":: Enter File Name:")"
                read -r -p ">>> " OPS_FIND_INPUT
            fi

            cat "$OPS_FIND_INPUT"
            echo
            bash_end ""
            ;;
        "$OPS_TRIGGER -D"* | "dir"*)
            BASH_TITLE="directory - $BASH_DIR"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            if [[ "$OPS_OPTION_FLAGS" =~ ^"$OPS_TRIGGER -D " ]]; then
                OPS_FIND_INPUT="${OPS_OPTION_FLAGS#"$OPS_TRIGGER -D "}"
            else 
                ls -a
                bash_end ""
            fi

            cd "$OPS_FIND_INPUT" > /dev/null 2>&1 && ls -a || echo ":: Can't Change Directory to $OPS_FIND_INPUT"
            bash_end ""
            ;;
        "$OPS_TRIGGER -K" | "kill")
            BASH_TITLE="kill"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            clear
            sleep 0.100
            chmod +x "$BASH_NAME"
            bash ./"$BASH_NAME"
            ;;
        "$OPS_TRIGGER -S" | "sync" | "update")
            BASH_TITLE="Update Triops"
            bash_title "$SHUSERS:~/ $BASH_TITLE"
        
            GITHUB_REPO="vilksons/triops"
            LATEST_COMMIT=$(curl -s "https://api.github.com/repos/$GITHUB_REPO/commits/main" | grep -o '"sha": "[^"]*"' | awk -F': "' '{print $2}' | tr -d '"')
            CURRENT_COMMIT=$(cat "$BASH_DIR/.current_commit" 2>/dev/null)

            if [[ "$LATEST_COMMIT" == "$CURRENT_COMMIT" ]]; then
                echo "warning: $BASH_NAME is up to date"
                bash_end ""
            else
                echo -e "$(bash_coltext_a ":: There is an update! Total commits: (SHA256): $LATEST_COMMIT")"
                read -r -p ":: Do you want to continue Sync Triops? [y/N] " PERMISSION_NEED_S
                while true; do
                    case "$PERMISSION_NEED_S" in
                        [Yy])
                            echo "Updating..."

                            cd "$BASH_DIR/.lib" > /dev/null 2>&1 || echo ""

                            curl -L --progress-bar -o "libtpm" "https://raw.githubusercontent.com/vilksons/Triops/refs/heads/main/Tools/libtpm" ||
                            curl -L --progress-bar -o "libtpm" "https://gitea.com/vilksons/triops/raw/branch/main/Tools/libtpm"

                            DOWNLOAD_STATUS=$?

                            if [ $DOWNLOAD_STATUS -ne 0 ]; then
                                echo -e "$(bash_coltext_r "Failed: Always check for updates on the official Triops repository. Before doing Sync.")"
                            fi

                            curl -L --progress-bar -o "libpack" "https://raw.githubusercontent.com/vilksons/triops/refs/heads/main/Tools/libpack" ||
                            curl -L --progress-bar -o "libpack" "https://gitea.com/vilksons/triops/raw/branch/main/Tools/libpack"

                            DOWNLOAD_STATUS=$?

                            if [ $DOWNLOAD_STATUS -ne 0 ]; then
                                echo -e "$(bash_coltext_r "Failed: Always check for updates on the official Triops repository. Before doing Sync.")"
                            fi

                            curl -L --progress-bar -o "security" "https://raw.githubusercontent.com/vilksons/triops/refs/heads/main/Tools/security" ||
                            curl -L --progress-bar -o "security" "https://gitea.com/vilksons/triops/raw/branch/main/Tools/security"
                            
                            DOWNLOAD_STATUS=$?

                            if [ $DOWNLOAD_STATUS -ne 0 ]; then
                                echo -e "$(bash_coltext_r "Failed: Always check for updates on the official Triops repository. Before doing Sync.")"
                            fi

                            sleep 1 && cd "$BASH_DIR" > /dev/null 2>&1 || echo "" && curl -L --progress-bar -o "$BASH_NAME" "$URL_TRIP" | curl -L --progress-bar -o "$BASH_NAME" "https://gitea.com/vilksons/triops/raw/branch/main/Scripts/triops"
                            
                            DOWNLOAD_STATUS=$?

                            if [ $DOWNLOAD_STATUS -ne 0 ]; then
                                echo -e "$(bash_coltext_r "Failed: Always check for updates on the official Triops repository. Before doing Sync.")"
                            fi

                            echo "$LATEST_COMMIT" > "$BASH_DIR/.current_commit"
        
                            sleep 1 && clear
                            chmod +x "$BASH_NAME"
                            bash ./"$BASH_NAME"
                            break
                            ;;
                        *)
                            bash_end ""
                            break
                            ;;
                    esac
                done
            fi
            ;;
        "$OPS_TRIGGER -X"* | "checksums"* | "sums")
            BASH_TITLE="Checksums"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            local OPS_FIND_ARGS="${OPS_OPTION_FLAGS#"$OPS_TRIGGER -X"}"
            local OPS_FIND_ARGS="${OPS_FIND_ARGS#checksums}"

            cd "$BASH_DIR" > /dev/null 2>&1 || echo ""

            if [[ -n "$OPS_FIND_ARGS" && "$OPS_FIND_ARGS" != "$OPS_OPTION_FLAGS" ]]; then
                OPS_FIND_INPUT="$OPS_FIND_ARGS"
            else
                echo "sha1:" && sha1sum "$BASH_NAME" && echo "sha256:" && sha256sum "$BASH_NAME" && echo "md5:" && md5sum "$BASH_NAME"
                bash_end ""
            fi

            if [[ "$OPS_FIND_INPUT" == "sha1" ]]; then
                sha1sum "$BASH_NAME"
            elif [[ "$OPS_FIND_INPUT" == "sha256" ]]; then
                sha256sum "$BASH_NAME"
            elif [[ "$OPS_FIND_INPUT" == "md5" ]]; then
                md5sum "$BASH_NAME"
            fi

            bash_end ""
            ;;
        "$OPS_TRIGGER -e" | "exit" | "end")
            BASH_TITLE="exit"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            sleep 0.100 &&
            bash -
            ;;
        "$OPS_TRIGGER -a"* | "chatbot"* | "ai")
            BASH_TITLE="chatbot"
            bash_title "$SHUSERS:~/ $BASH_TITLE"

            local OPS_FIND_ARGS="${OPS_OPTION_FLAGS#"$OPS_TRIGGER -a "}"
            local OPS_FIND_ARGS="${OPS_FIND_ARGS#chatbot }"

            if [[ -n "$OPS_FIND_ARGS" && "$OPS_FIND_ARGS" != "$OPS_OPTION_FLAGS" ]]; then
                user_question="$OPS_FIND_ARGS"
            else
                echo -e "$(bash_coltext_a ":: Enter Question:")"
                echo " -> enter \"exit\" to exit"
                read -r -p ">>> " user_question
            fi

            if [[ "$user_question" == "exit" ]]; then
                bash_end ""
            fi

            response=$(curl -s -X POST https://api.groq.com/openai/v1/chat/completions \
                -H "Authorization: Bearer $CHATBOT_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{
                    \"model\": \"$CHATBOT_MODEL\",
                    \"messages\": [
                        {
                        \"role\": \"system\",
                        \"content\": \"$CHATBOT_BIODATA\"
                        },
                        {
                        \"role\": \"user\",
                        \"content\": \"$user_question\"
                        }
                    ],
                    \"temperature\": 1,
                    \"max_tokens\": 1024,
                    \"top_p\": 1,
                    \"stream\": false,
                    \"stop\": null
                    }")

            if [ "$CHATBOT_JSON_GET" == "python3" ]; then
                echo "$response" | python3 -c "import sys, json; print(json.load(sys.stdin)['choices'][0]['message']['content'])"
            elif [ "$CHATBOT_JSON_GET" == "sed" ]; then
                echo "$response" | sed -E 's/.*"content":"([^"]*)".*/\1/' | awk '{gsub(/\\n/, "\n")}1'
            elif [ "$CHATBOT_JSON_GET" == "grep" ]; then
                echo "$response" | grep -oP '"content":"\K[^"]*'
            fi

            echo "----------------------------------"
            bash_end ""
            ;;
        "$OPS_TRIGGER -N"* | "nano"*)
            if [ "$_OS_DISABLE_GNU_NANO" == "false" ]; then
                BASH_TITLE="GNU Nano Editor"
                bash_title "$BASH_TITLE"
                
                local OPS_FIND_ARGS="${#"$OPS_TRIGGER -N "}"
                local OPS_FIND_ARGS="${OPS_FIND_ARGS#nano }"

                if [[ -n "$OPS_FIND_ARGS" && "$OPS_FIND_ARGS" != "$OPS_OPTION_FLAGS" ]]; then
                    FILE_PATH="$OPS_FIND_ARGS"
                else
                    echo -e "$(bash_coltext_a ":: Enter File Name:")"
                    read -r -p ">>> " FILE_PATH
                fi

                nano "$FILE_PATH"
                bash_end ""
            else
                echo "error: $OPS_OPTION_FLAGS: command not found"
                bash_end ""
            fi
            ;;
        "$OPS_TRIGGER -O" | "remcac")
            BASH_TITLE="Remove Cache"
            bash_title "$BASH_TITLE"

            echo -e "$(bash_coltext_a ":: Cache Dir: $BASH_DIR/.cache")"
            read -r -p ":: Do you want to remove ALL files from cache? [y/n] " PERMISSION_NEED_RC

            while true; do
            case "$PERMISSION_NEED_RC" in
                [Yy])
                    cd "$BASH_DIR" > /dev/null 2>&1 || echo ""
                    rm -rf "$BASH_DIR/.cache" && sleep 1

                    if [ ! -d ".cache" ]; then
                        mkdir ".cache"
                    fi

                    sleep 0.100 &&
                    bash_end ""
                    break
                    ;;
                *)
                    bash_end ""
                    esac
            done
            ;;
        "fetch")
            GITHUB_REPO="vilksons/triops"
            LATEST_COMMIT=$(curl -s "https://api.github.com/repos/$GITHUB_REPO/commits/main" | grep -o '"sha": "[^"]*"' | awk -F': "' '{print $2}' | tr -d '"')
            CURRENT_COMMIT=$(cat "$BASH_DIR/.current_commit" 2>/dev/null)
        
            echo -e "
d888888b d8888b. d888888b  .d88b.  d8888b. .d8888. 
\`~~88~~' 88  \`8D   \`88'   .8P  Y8. 88  \`8D 88'  YP 
   88    88oobY'    88    88    88 88oodD' \`8bo.   
   88    88\`8b      88    88    88 88~~~     \`Y8b. 
   88    88 \`88.   .88.   \`8b  d8' 88      db   8D 
   YP    88   YD Y888888P  \`Y88P'  88      \`8888Y' 
"

        
            if [[ "$LATEST_COMMIT" == "$CURRENT_COMMIT" ]]; then
                echo "Triops is up-to-date. / $RELEASE_DATE"
            else
                echo "Triops Date: $RELEASE_DATE"
            fi
            
            echo "Triops Licenses: $LICENSES"

            PLATFORM=""
            if [ $_OS_GNU_LINUX == 1 ]; then PLATFORM="Linux"; fi
            if [ $_OS_WINDOWS == 1 ]; then PLATFORM="${PLATFORM:+$PLATFORM & }Windows"; fi
            if [ $_OS_DARWIN == 1 ]; then PLATFORM="${PLATFORM:+$PLATFORM & }Darwin / MacOS"; fi

            if [ -n "$PLATFORM" ]; then
                echo "Triops Platform: $PLATFORM"
            else
                echo "Triops Platform: Unknown"
            fi
            bash_end ""
            ;;
        "$OPS_TRIGGER -M" | "tpm")
            bash_typeof2 ""
            bash_help2 ""
            ;;
        "help"* | "$OPS_TRIGGER -h"* | "$OPS_TRIGGER --h"*)
            title=$1
            if [ "$title" != "no" ]; then
                BASH_TITLE="help"
                bash_title "$SHUSERS:~/ $BASH_TITLE"
            fi

            local OPS_FIND_ARGS="${OPS_OPTION_FLAGS#"$OPS_TRIGGER -h "}"
            local OPS_FIND_ARGS="${OPS_FIND_ARGS#help }"
            local OPS_FIND_ARGS="${OPS_FIND_ARGS#"$OPS_TRIGGER --h "}"

            declare -A descriptions=(
                ["compiles"]=":: Compile a project -> Usage: ops -c | compiles | (+) [<args>] [target]"
                ["running"]=":: Running a project -> Usage: ops -r | runn | (+) [<args>] [target]"
                ["debug"]=":: Debug a project -> Usage: ops -d | debug | (+) [<args>] [target]"
                ["stop"]=":: stop all running server progress -> Usage: ops -s | stop"
                ["restart"]=":: Restart all Server -> Usage: ops -t | restart"
                ["crunn"]=":: Compile & Running a project -> Usage: ops -u | crunn"
                ["gamemodes"]=":: Download GameModes SA-MP with Selection -> Usage: ops -g | gamemodes | gmodes"
                ["pawncc"]=":: Download PawnCC SA-MP with Selection -> Usage: ops -p | pawncc | pcc"
                ["clear"]=":: Clear Screen Terminal -> Usage: ops -C | clear | cc"
                ["checksums"]=":: Checksums of Triops -> Usage: ops -X | checksums | sums | (+) [<args>] \"sha1\" \"sha256\" \"md5\" default=ALL"
                ["fcheck"]=":: Checks Directory of SA-MP -> Usage: ops -F | fcheck"
                ["cat"]=":: Display a files to Triops Terminal -> Usage: ops -T | cat"
                ["kill"]=":: Kill a Triops Terminal -> Usage: ops -K | kill"
                ["directory"]=":: Change Terminal Directory (OP.1) or Display Terminal list files/dir (OP.2) -> Usage: ops -D (OP.1) | directory - dir (OP.2)"
                ["update"]=":: Update/Upgrade/Sync Triops Shell up-to-date -> Usage: ops -S | update | sync"
                ["exit"]=":: Exit/End Triops Terminal -> Usage: ops -e | exit | end"
                ["remcac"]=":: Remove cache \".cache\" Triops -> Usage: ops -O | remcac"
                ["chatbot"]=":: Chatbot Terminal -> Usage: ops -a | chatbot | ai | (+) [<args>] [question]"
                ["nano"]=":: GNU/Nano Editor -> Usage: ops -N | nano"
                ["tpm"]=":: Triops Mode to TPM Mode -> Usage: ops -M | tpm"
                ["fetch"]=":: Fetch Triops -> Usage: fetch"
            )
            
            if [[ -n "$OPS_FIND_ARGS" && "$OPS_FIND_ARGS" != "$OPS_OPTION_FLAGS" ]]; then
                if [[ -n "${descriptions[$OPS_FIND_ARGS]}" ]]; then
                    if [[ "$OPS_FIND_ARGS" == "nano" && "$_OS_DISABLE_GNU_NANO" == "true" ]]; then
                        bash_help "invalid"
                    else
                        echo "${descriptions[$OPS_FIND_ARGS]}"
                    fi
                else
                    bash_help "invalid"
                fi
            else
                bash_help ""
            fi

            bash_end ""
            ;;
        "$OPS_TRIGGER")
            bash_help "no"
            bash_typeof ""
            ;;
        "" | " ")
            bash_typeof ""
            ;;
        *)
            echo "error: $OPS_OPTION_FLAGS: command not found"
            bash_typeof ""
            ;;
    esac
}

function bash_help()
{
    local check_param=$1

    if [ "$check_param" == "invalid" ]; then
        echo "Invalid!.. Please Use:"
    fi

    echo "Usage: ops <command> | help | -h | --h | [<commands>]"
    echo "Commands:"
    echo " compiles, running, debug, stop, restart"
    echo " crunn, gamemodes, pawncc, clear, checksums"
    echo " fcheck, cat, tpm, kill, directory"

    if [ "$_OS_DISABLE_GNU_NANO" == "true" ]; then
        echo " update, exit, remcac, chatbot, fetch"
    else
        echo " update, exit, remcac, chatbot, nano, fetch"
    fi
}

function bash_help2()
{
    echo "Usage: ops <command> [<args>]"
    echo "Commands:"
    echo " -S/install - Install/Reinstall Packages"
    echo " -r/remove  - Remove Packages"
    echo " -E/end     - End TPM Mode"
}

function bash_end() {
    echo -e "$(bash_coltext_y "# Press any key to return.")"
    read -r -n 1 -s
    bash_typeof ""
}

function triops_servers() {
    if [ ! -f "$BASH_DIR/$_OS_SSERVER" ]; then
        echo -e "$(bash_coltext_r "crit:") $_OS_SSERVER not found!. You can get this in \`ops -g\`"

        read -r -n 1 -s
        bash_typeof ""
    fi

    if [ -f "$BASH_DIR/server_log.txt" ]; then
        rm -rf "$BASH_DIR/server_log.txt"
    fi

    cd "$BASH_DIR" || echo

    chmod 777 "$_OS_SSERVER"
    exec -a "$DOB_SHA256_CRYPTO" ./"$_OS_SSERVER" &
    sleep 2
    if ! pgrep -x "$_OS_SSERVER" > /dev/null; then
        BASH_TITLE="running - failed"
        bash_title "$SHUSERS:~/ $BASH_TITLE"

        echo
        echo -e "$(bash_coltext_r "# Fail")"
        echo
        if [ -f "server_log.txt" ]; then
            sleep 2
            cat server_log.txt
            echo
        else
            echo "# server_log.txt not found."
        fi

        echo -e "$(bash_coltext_y "# End.")"
        echo
        bash_typeof ""
    else
        echo
        echo -e "$(bash_coltext_y "# Success")"
        echo

        sleep 2
        if grep -i "error" server_log.txt > /dev/null; then
            start_true ""
        else
            start_false ""
        fi
    fi
}

function withArgs_triops_servers() {
    local OPS_FIND_INPUT=$1
    if [ ! -f "server.cfg" ]; then
        echo "server.cfg not found!"
        bash_end ""
    fi

    mv server.cfg server.cfg.bak

    awk -v new_gamemode="$OPS_FIND_INPUT" '
        /^gamemode0 / {$2=new_gamemode} 1' server.cfg.bak > server.cfg || \
            sed -E "s/^(gamemode0 )[0-9]+/\1$OPS_FIND_INPUT/" server.cfg.bak > server.cfg
            
    echo ":: New server.cfg created with gamemode: $OPS_FIND_INPUT"

    if [ ! -f "$BASH_DIR/$_OS_SSERVER" ]; then
        echo -e "$(bash_coltext_r "crit:") $_OS_SSERVER not found!. You can get this in \`ops -g\`"

        read -r -n 1 -s
        bash_typeof ""
    else
        chmod 777 "$_OS_SSERVER"
        exec -a "$DOB_SHA256_CRYPTO" ./"$_OS_SSERVER" &
        sleep 1
        cat server_log.txt
        echo

        if [ $VAR_SERVERS == 2 ]; then
            if [ -f "$DOB_SHA256_CRYPTO" ]; then
                PID=$(cat "$DOB_SHA256_CRYPTO")
                kill -15 "$PID" > /dev/null 2>&1
            fi
        fi
    fi

    rm -f server.cfg
    mv server.cfg.bak server.cfg
    echo "Original server.cfg has been restored."
}

function triops_compilers() {
    SHFILE="false"

    while IFS= read -r -d '' pawncc; do
        if [ -f "$pawncc" ]; then
            COMPILER_PAWNCC="$pawncc"
            break
        fi
    done < <(find "$BASH_DIR" -type f -iname "$_OS_PAWNCC" -print0)

    if [ -z "$COMPILER_PAWNCC" ]; then
        echo -e "$(bash_coltext_g "warn:") $_OS_PAWNCC not found!. You can get this in \`ops -p\`"

        read -r -n 1 -s
        bash_end ""
    fi

    mapfile -d '' files < <(find "$BASH_DIR" -name "*.io*" -type f -print0)

    for file in "${files[@]}"; do
        if [ -f "$file" ] && [[ "$file" != *.amx ]]; then
            SHFILE="true"
            bash_title "$file"

            AMX_O="$(dirname "$file")/$(basename "${file%.io*}.amx")"

            echo -e "$(bash_coltext_y "dbg:") Processing: $file"

            "$COMPILER_PAWNCC" -i"$BASH_DIR$BASH_ALLOW_SDIR" "$file" -o"$AMX_O" "$AMX_OPT_F" > "$METADAT_FILE" 2>&1

            bash_cache_compiler ""
            sleep 0.100 &&
            cat "$METADAT_FILE"

            if [ -s "$AMX_O" ]; then
                echo
                echo "~ $AMX_O"
                if [ "$COMPILER_MODE" == "true" ]; then
                    BASH_TITLE="compilers"
                    bash_title "$SHUSERS:~/ $BASH_TITLE"
                elif [ "$COMPILER_MODE" == "false" ]; then
                    BASH_TITLE="compiler - running"
                    bash_title "$SHUSERS:~/ $BASH_TITLE"
                fi
                echo "total size : $(stat -c%s "$AMX_O") bytes"
                echo
            else
                if [ "$COMPILER_MODE" == "false" ]; then
                    bash_end ""
                fi
            fi
        fi
    done

    if [ "$SHFILE" == "false" ]; then
        echo -e "$(bash_coltext_r "..io not found!")"
        echo
        bash_end ""
    fi
    if [ "$COMPILER_MODE" == "true" ]; then
        bash_end ""
    elif [ "$COMPILER_MODE" == "false" ]; then
        ok_next ""
    fi
}

function bash_cache_compiler() {
    cache_compiler=".cache/compiler.log"
    _cache_compiler=".cache/.compiler.log"
    if [ -f "$_cache_compiler" ]; then
        rm -rf "$_cache_compiler"
    fi
    while IFS= read -r line; do
        echo "~" >> "$_cache_compiler"
        echo "$line" >> "$_cache_compiler"
    done < "$cache_compiler"
    mv "$_cache_compiler" "$cache_compiler" > /dev/null
}

function bash_check_dir() {
    local folder=$1
    if [ -d "$folder" ]; then
        echo
        echo "# $folder is .. Ok .."
        echo " [A subdirectory or file $folder already exists.]"
        echo "-"

        sleep 0.100 &&
        return
    else
        mkdir -p "$folder"
        echo ":: Create? '$BASH_DIR/$folder'...: [yes]"
        
        sleep 0.200

        if [ "$folder" == "gamemodes" ]; then
            cat <<EOF > gamemodes/main.io.pwn
#include <a_samp>

main() {
    print("Hello, World!");
}
EOF
        fi

        return
    fi
}

check2() {
    if grep -i "failed" server_log.txt > /dev/null; then
        start_true2 ""
    else
        start_false2 ""
    fi
}

check3() {
    if grep -i "invalid" server_log.txt > /dev/null; then
        start_true3 ""
    else
        start_false3 ""
    fi
}

start_true() {
    echo -e "$(bash_coltext_r "~")"
    echo "    ; \"error\"   .. Yes .. True"
    error_cache ""
}

start_false() {
    echo -e "$(bash_coltext_y "~")"
    echo "    ; \"error\"   .. No .. False"
    check2 ""
}

start_true2() {
    echo -e "$(bash_coltext_r "~")"
    echo "    ; \"failed\"  .. Yes .. True"
    failed_cache ""
}

start_false2() {
    echo -e "$(bash_coltext_y "~")"
    echo "    ; \"failed\"  .. No .. False"
    check3 ""
}

start_true3() {
    echo -e "$(bash_coltext_r "~")"
    echo "    ; \"invalid\" .. Yes .. True"
    invalid_cache ""
}

start_false3() {
    echo -e "$(bash_coltext_y "~")"
    echo "    ; \"invalid\" .. No .. False"
    echo
    bash_end ""
}

error_cache() {
    echo
    grep -i "error" server_log.txt
    echo
    check2 ""
}

failed_cache() {
    echo
    grep -i "failed" server_log.txt
    echo
    check3 ""
}

invalid_cache() {
    echo
    grep -i "invalid" server_log.txt
    echo
    bash_end ""
}

ok_next() {
    echo -e "$(bash_coltext_y "Press any key to running.")"
    echo
    read -r -n 1 -s
    triops_servers ""
}

bash_typeof ""

if [ -z "$1" ]; then
    bash_end ""
fi
