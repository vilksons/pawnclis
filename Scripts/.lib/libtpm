#!/bin/bash

function send_samp_linux()
{
    echo ":: Do you want to continue downloading SA-MP? (Yy/Nn)"
    read -r -p ">> " SEL_C
    if [[ "$SEL_C" =~ ^[Yy]$ ]]; then
        cd "$BASH_DIR" || bash_end ""
        echo "Select the SA-MP version to download:"
        echo "[A/a] SA-MP 0.3.DL R1"
        echo "[B/b] SA-MP 0.3.7 R3"
        echo "[C/c] SA-MP 0.3.7 R2-1-1"
        read -r -p ">> " VERSION_NEED
        
        while true; do
            case "$VERSION_NEED" in
                [Aa])
                    DOWNLOAD_URL_CURL="https://sa-mp.co.id/files/samp03DLsvr_R1.tar.gz"
                    DOWNLOAD_FILE_CURL="samp03DLsvr_R1.tar.gz"
                    break
                    ;;
                [Bb])
                    DOWNLOAD_URL_CURL="https://files.sa-mp.app/samp037svr_R2-2-1.tar.gz"
                    DOWNLOAD_FILE_CURL="samp037svr_R2-2-1.tar.gz"
                    break
                    ;;
                [Cc])
                    DOWNLOAD_URL_CURL="https://files.sa-mp.app/samp037svr_R2-2-1.tar.gz"
                    DOWNLOAD_FILE_CURL="samp037svr_R2-2-1.tar.gz"
                    break
                    ;;
                *)
                    echo -e "$(bash_coltext_r "err:") Invalid selection. Please enter the Number!"
                    read -r -p ">> " VERSION_NEED
                    ;;
            esac
        done

        echo -e "\nDownloading: $DOWNLOAD_URL_CURL -> $DOWNLOAD_FILE_CURL"
        if ! curl -L --progress-bar -o "$DOWNLOAD_FILE_CURL" "$DOWNLOAD_URL_CURL"; then
            echo -e "$(bash_coltext_r "fail:") Failed to download the file.."
            
            bash_end ""
        else
            tar -xzvf "$DOWNLOAD_FILE_CURL" -C "$BASH_DIR" --strip-components=1

            echo
            echo -n "$(bash_coltext_y "Download completed successfully.")"
            echo
            echo "Please rename \"rcon_password\" before running this command again"

            bash_end ""
        fi
    else
        bash_end ""
    fi
}
export send_samp_linux

function send_compilers_linux()
{
    echo ":: Do you want to continue downloading PawnCC? (Yy/Nn)"
    read -r -p ">> " SEL_C
    if [[ "$SEL_C" =~ ^[Yy]$ ]]; then
        cd "$BASH_DIR" || bash_end ""
        echo "Select the PawnCC version to download:"
        echo "[A/a] PawnCC 3.10.10"
        echo "[B/b] PawnCC 3.10.9"
        echo "[C/c] PawnCC 3.10.8"
        echo "[D/d] PawnCC 3.10.7"
        echo "[E/e] PawnCC 3.10.6"
        echo "[F/f] PawnCC 3.10.5"
        echo "[G/g] PawnCC 3.10.4"
        echo "[H/h] PawnCC 3.10.3"
        echo "[I/i] PawnCC 3.10.2"
        echo "[J/j] PawnCC 3.10.1"
        read -r -p ">> " VERSION_NEED

        while true; do
            case "$VERSION_NEED" in
                [Aa])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.10/pawnc-3.10.10-linux.tar.gz"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.10-linux.tar.gz"
                    break
                    ;;
                [Bb])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.9/pawnc-3.10.9-linux.tar.gz"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.9-linux.tar.gz"
                    break
                    ;;
                [Cc])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.8/pawnc-3.10.8-linux.tar.gz"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.8-linux.tar.gz"
                    break
                    ;;
                [Dd])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.7/pawnc-3.10.7-linux.tar.gz"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.7-linux.tar.gz"
                    break
                    ;;
                [Ee])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.6/pawnc-3.10.6-linux.tar.gz"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.6-linux.tar.gz"
                    break
                    ;;
                [Ff])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.5/pawnc-3.10.5-linux.tar.gz"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.5-linux.tar.gz"
                    break
                    ;;
                [Gg])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.4/pawnc-3.10.4-linux.tar.gz"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.4-linux.tar.gz"
                    break
                    ;;
                [Hh])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.3/pawnc-3.10.3-linux.tar.gz"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.3-linux.tar.gz"
                    break
                    ;;
                [Ii])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.2/pawnc-3.10.2-linux.tar.gz"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.2-linux.tar.gz"
                    break
                    ;;
                [Jj])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.1/pawnc-3.10.1-linux.tar.gz"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.1-linux.tar.gz"
                    break
                    ;;
                *)
                    echo -e "$(bash_coltext_r "err:") Invalid selection. Please enter the Number!"
                    read -r -p ">> " VERSION_NEED
                    ;;
            esac
        done

        echo -e "\nDownloading: $DOWNLOAD_URL_CURL -> $DOWNLOAD_FILE_CURL"
        if ! curl -L --progress-bar -o "$DOWNLOAD_FILE_CURL" "$DOWNLOAD_URL_CURL"; then
            echo -e "$(bash_coltext_r "fail:") Failed to download the file.."

            bash_end ""
        else
            tar -xzvf "$DOWNLOAD_FILE_CURL" -C "$BASH_DIR" --strip-components=1

            echo
            echo -e "$(bash_coltext_y "Download completed successfully.")"
            echo "See https://github.com/vilksons/triops/wiki/PawnCC-Installation for Docs."

            bash_end ""
        fi
    else
        bash_end ""
    fi
}
export send_compilers_linux

function send_samp_win()
{
    echo ":: Do you want to continue downloading SA-MP? (Yy/Nn)"
    read -r -p ">> " SEL_C
    if [[ "$SEL_C" =~ ^[Yy]$ ]]; then
        cd "$BASH_DIR" || bash_end ""
        echo "Select the SA-MP version to download:"
        echo "[A/a] SA-MP 0.3.7 R2-1-1"
        echo "[B/b] SA-MP 0.3.7 R3"
        echo "[C/c] SA-MP 0.3.DL R1"
        read -r -p ">> " VERSION_NEED

        while true; do
            case "$VERSION_NEED" in
                [Aa])
                    DOWNLOAD_URL_CURL="https://files.sa-mp.app/samp037_svr_R2-1-1_win32.zip"
                    DOWNLOAD_FILE_CURL="samp037_svr_R2-1-1_win32.zip"
                    break
                    ;;
                [Bb])
                    DOWNLOAD_URL_CURL="https://files.sa-mp.app/samp037_svr_R3_win32.zip"
                    DOWNLOAD_FILE_CURL="samp037_svr_R3_win32.zip"
                    break
                    ;;
                [Cc])
                    DOWNLOAD_URL_CURL="https://sa-mp.co.id/files/samp03DL_svr_R1_win32.zip"
                    DOWNLOAD_FILE_CURL="samp03DL_svr_R1_win32.zip"
                    break
                    ;;
                *)
                    echo -e "$(bash_coltext_r "err:") Invalid selection. Please enter the Number!"
                    read -r -p ">> " VERSION_NEED
                    ;;
            esac
        done

        echo -e "\nDownloading: $DOWNLOAD_URL_CURL -> $DOWNLOAD_FILE_CURL"
        if ! curl -L --progress-bar -o "$DOWNLOAD_FILE_CURL" "$DOWNLOAD_URL_CURL"; then
            echo -e "$(bash_coltext_r "fail:") Failed to download the file.."

            bash_end ""
        else
            unzip -q "$DOWNLOAD_FILE_CURL" -d "$BASH_DIR"

            echo
            echo -n "$(bash_coltext_y "Download completed successfully.")"
            echo
            echo "Please rename \"rcon_password\" before running this command again"

            bash_end ""
        fi
    else
        bash_end ""
    fi
}
export send_samp_win

function send_compilers_win()
{
    echo ":: Do you want to continue downloading PawnCC? (Yy/Nn)"
    read -r -p ">> " SEL_C
    if [[ "$SEL_C" =~ ^[Yy]$ ]]; then
        cd "$BASH_DIR" || bash_end ""
        echo "Select the PawnCC version to download:"
        echo "[A/a] PawnCC 3.10.10"
        echo "[B/b] PawnCC 3.10.9"
        echo "[C/c] PawnCC 3.10.8"
        echo "[D/d] PawnCC 3.10.7"
        echo "[E/e] PawnCC 3.10.6"
        echo "[F/f] PawnCC 3.10.5"
        echo "[G/g] PawnCC 3.10.4"
        echo "[H/h] PawnCC 3.10.3"
        echo "[I/i] PawnCC 3.10.2"
        echo "[J/j] PawnCC 3.10.1"
        read -r -p ">> " VERSION_NEED

        while true; do
            case "$VERSION_NEED" in
                [Aa])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.10/pawnc-3.10.10-windows.zip"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.10-windows.zip"
                    break
                    ;;
                [Bb])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.9/pawnc-3.10.9-windows.zip"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.9-windows.zip"
                    break
                    ;;
                [Cc])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.8/pawnc-3.10.8-windows.zip"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.8-windows.zip"
                    break
                    ;;
                [Dd])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.7/pawnc-3.10.7-windows.zip"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.7-windows.zip"
                    break
                    ;;
                [Ee])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.6/pawnc-3.10.6-windows.zip"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.6-windows.zip"
                    break
                    ;;
                [Ff])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.5/pawnc-3.10.5-windows.zip"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.5-windows.zip"
                    break
                    ;;
                [Gg])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.4/pawnc-3.10.4-windows.zip"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.4-windows.zip"
                    break
                    ;;
                [Hh])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.3/pawnc-3.10.3-windows.zip"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.3-windows.zip"
                    break
                    ;;
                [Ii])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.2/pawnc-3.10.2-windows.zip"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.2-windows.zip"
                    break
                    ;;
                [Jj])
                    DOWNLOAD_URL_CURL="https://github.com/pawn-lang/compiler/releases/download/v3.10.1/pawnc-3.10.1-windows.zip"
                    DOWNLOAD_FILE_CURL="pawnc-3.10.1-windows.zip"
                    break
                    ;;
                *)
                    echo -e "$(bash_coltext_r "err:") Invalid selection. Please enter the Number!"
                    read -r -p ">> " VERSION_NEED
                    ;;
            esac
        done

        echo -e "\nDownloading: $DOWNLOAD_URL_CURL -> $DOWNLOAD_FILE_CURL"
        if ! curl -L --progress-bar -o "$DOWNLOAD_FILE_CURL" "$DOWNLOAD_URL_CURL"; then
            echo -e "$(bash_coltext_r "fail:") Failed to download the file.."

            bash_end ""
        else
            unzip -q "$DOWNLOAD_FILE_CURL" -d "$BASH_DIR"

            echo
            echo -e "$(bash_coltext_y "Download completed successfully.")"
            echo

            bash_end ""
        fi
    else
        bash_end ""
    fi
}
export send_compilers_win